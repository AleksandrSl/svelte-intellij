Svelte Component
  Svelte: IF_BLOCK
    Svelte: IF_BLOCK_OPENING
      Svelte: IF_BLOCK_OPENING_TAG
        PsiElement({#)('{ #')
        PsiElement(if)('if')
        PsiWhiteSpace(' ')
        Svelte: EXPRESSION
          PsiElement(CODE_FRAGMENT)('a')
        PsiElement(})('}')
      PsiWhiteSpace('\n    ')
      Svelte: SCOPE
        PsiElement(<markup>)('<p>First')
        PsiWhiteSpace(' ')
        PsiElement(<markup>)('branch</p>')
    PsiErrorElement:'{/' expected, got '{:'
      <empty list>
  PsiWhiteSpace('\n')
  PsiElement({:)('{:')
  PsiElement(DUMMY_BLOCK)
    PsiElement(BAD_CHARACTER)('elseif')
    PsiWhiteSpace(' ')
    PsiElement(CODE_FRAGMENT)('b')
    PsiElement(})('}')
    PsiWhiteSpace('\n    ')
    PsiElement(<markup>)('<p>Second')
    PsiWhiteSpace(' ')
    PsiElement(<markup>)('branch</p>')
    PsiWhiteSpace('\n')
    PsiElement({:)('{ :')
    PsiElement(else)('else')
    PsiElement(})('}')
    PsiWhiteSpace('\n    ')
    PsiElement(<markup>)('<p>Third')
    PsiWhiteSpace(' ')
    PsiElement(<markup>)('branch</p>')
  PsiElement(DUMMY_BLOCK)
    PsiWhiteSpace('\n')
    PsiElement({/)('{ /')
    PsiElement(if)('if')
    PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement({#)('{#')
    PsiElement(BAD_CHARACTER)('eachassets')
    PsiWhiteSpace(' ')
    PsiElement(as)('as')
    PsiWhiteSpace(' ')
    PsiElement(CODE_FRAGMENT)('asset')
    PsiElement(,)(',')
    PsiElement(CODE_FRAGMENT)('i')
    PsiWhiteSpace(' ')
    PsiElement(})('}')
  PsiElement({/)('{/')
  PsiElement(BAD_CHARACTER)(' ')
  PsiElement(each)('each')
  PsiElement(})('}')