{
  parserClass="dev.blachut.svelte.lang.SvelteParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Svelte"
  psiImplClassSuffix="Impl"
  psiPackage="dev.blachut.svelte.lang.psi"
  psiImplPackage="dev.blachut.svelte.lang.psi.impl"

  elementTypeHolderClass="dev.blachut.svelte.lang.psi.SvelteTypes"
  elementTypeClass="dev.blachut.svelte.lang.psi.SvelteElementType"
  tokenTypeClass="dev.blachut.svelte.lang.psi.SvelteElementType"

  tokens = [
    START_MUSTACHE="{"
    END_MUSTACHE="}"
    IF="#if"
    ELSE_IF="if"
    END_IF="/if"
    EACH="#each"
    AS="as"
    COMMA=","
    START_PAREN="("
    END_PAREN=")"
    END_EACH="/each"
    AWAIT="#await"
    AWAIT_THEN="then"
    THEN=":then"
    CATCH=":catch"
    AWAIT_END="/await"
    ELSE=":else"
  ]
}

svelteComponent ::= scope

scope ::= (block|interpolation|HTML_FRAGMENT)*

private block ::= ifBlock | eachBlock | awaitBlock

ifBlock ::= ifBlockOpening scope (ifElseContinuation scope)* (elseContinuation scope)? ifBlockClosing {pin=1}
eachBlock ::= eachBlockOpening scope (elseContinuation scope)? eachBlockClosing {pin=1}
awaitBlock ::= (awaitThenBlockOpening scope | awaitBlockOpening scope thenContinuation scope) (catchContinuation scope)? awaitBlockClosing {pin=1}

ifBlockOpening ::= '{' '#if' expression '}' {pin=2}
ifElseContinuation ::= '{' ':else' 'if' expression '}' {pin=3}
ifBlockClosing ::= '{' '/if' '}' {pin=2}

eachBlockOpening ::= '{' '#each' expression 'as' parameter (',' parameter)? ('(' expression ')')? '}' {pin=2}
eachBlockClosing ::= '{' '/each' '}' {pin=2}

awaitBlockOpening ::= '{' '#await' expression '}' {pin=2}
awaitThenBlockOpening ::= '{' '#await' expression 'then' parameter '}' {pin=4}
thenContinuation ::= '{' ':then' parameter '}' {pin=2}
catchContinuation ::= '{' ':catch' parameter '}' {pin=2}
awaitBlockClosing ::= '{' '/await' '}' {pin=2}

elseContinuation ::= '{' ':else' '}' {pin=2}

interpolation ::= '{' expression '}' {pin=2; recoverWhile="interpolation_recover"}
private interpolation_recover ::= &'}'

expression ::= CODE_FRAGMENT {
                               name="expression"
                               extends="dev.blachut.svelte.lang.psi.SvelteCodeInjectionHostImpl"
                               implements="com.intellij.psi.PsiLanguageInjectionHost"
                             }
parameter ::= CODE_FRAGMENT {
                              name="parameter"
                              extends="dev.blachut.svelte.lang.psi.SvelteCodeInjectionHostImpl"
                              implements="com.intellij.psi.PsiLanguageInjectionHost"
                            }